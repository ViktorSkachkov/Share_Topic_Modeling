import os
import pandas as pd
from bertopic import BERTopic

class TopicModelingVisualisation:
    def __init__(self, topic_model: BERTopic, documents: list, output_dir: str):
        """
        Initialize the visualization class with the topic model, documents, and output directory.

        :param topic_model: The BERTopic model instance
        :param documents: List of documents used for topic modeling
        :param output_dir: Directory where visualizations will be saved
        """
        # Ensure all documents are strings
        self.topic_model = topic_model
        self.documents = [self.ensure_string(doc) for doc in documents]
        self.output_dir = output_dir

        # Create the output directory if it doesn't exist
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

    @staticmethod
    def ensure_string(doc) -> str:
        """
        Ensure that the document is a string.
        Converts any non-string types (e.g., float, NaN) to a string.
        """
        if not isinstance(doc, str):
            return "" if pd.isna(doc) else str(doc)
        return doc

    def visualize_topics(self):
        """Visualize the topics generated by the model and save as an image."""
        fig = self.topic_model.visualize_topics()
        file_path = os.path.join(self.output_dir, "topics_visualization.html")
        fig.write_html(file_path)
        print(f"Topics visualization saved to {file_path}")

    def visualize_distribution(self):
        """Visualize the distribution of topics across documents and save as an image."""
        topic_distr, _ = self.topic_model.approximate_distribution(self.documents)
        fig = self.topic_model.visualize_distribution(topic_distr[0])
        file_path = os.path.join(self.output_dir, "distribution_visualization.html")
        fig.write_html(file_path)
        print(f"Distribution visualization saved to {file_path}")

    def visualize_barchart(self, top_n_topics=50, n_words=8):
        """Visualize a bar chart of the top N topics with N words each and save as an image."""
        fig = self.topic_model.visualize_barchart(top_n_topics=top_n_topics, n_words=n_words)
        file_path = os.path.join(self.output_dir, "barchart_visualization.html")
        fig.write_html(file_path)
        print(f"Bar chart visualization saved to {file_path}")

    def visualize_documents(self):
        """Visualize documents within the topic model and save as an image."""
        fig = self.topic_model.visualize_documents(self.documents)
        file_path = os.path.join(self.output_dir, "documents_visualization.html")
        fig.write_html(file_path)
        print(f"Documents visualization saved to {file_path}")

    def visualize_hierarchy(self):
        """Visualize the hierarchy of topics and save as an image."""
        hierarchical_topics = self.topic_model.hierarchical_topics(self.documents)
        fig = self.topic_model.visualize_hierarchy(hierarchical_topics=hierarchical_topics)
        file_path = os.path.join(self.output_dir, "hierarchy_visualization.html")
        fig.write_html(file_path)
        print(f"Hierarchy visualization saved to {file_path}")

    def run_all_visualizations(self):
        """Execute all visualization methods one after the other and save them."""
        print("Visualizing topics...")
        self.visualize_topics()

        print("Visualizing topic distribution...")
        self.visualize_distribution()

        print("Visualizing bar chart of topics...")
        self.visualize_barchart(top_n_topics=50, n_words=8)

        print("Visualizing documents...")
        self.visualize_documents()

        print("Visualizing topic hierarchy...")
        self.visualize_hierarchy()

        print("All visualizations completed.")